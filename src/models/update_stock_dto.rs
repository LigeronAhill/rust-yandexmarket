/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 *
 * Generated by: https://openapi-generator.tech
 */
use serde::{Deserialize, Serialize};
use crate::models::UpdateStockItemDto;

/// UpdateStockDto : Информация об остатках одного товара на одном из складов.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateStockDto {
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    #[serde(rename = "sku")]
    pub sku: String,
    /// Информация об остатках товара.
    #[serde(rename = "items")]
    pub items: Vec<crate::models::UpdateStockItemDto>,
}

impl UpdateStockDto {
    /// Информация об остатках одного товара на одном из складов.
    pub fn new<T: ToString, N: ToCount>(sku: T, counts: Vec<N>) -> UpdateStockDto {
        let items = counts
            .into_iter()
            .map(|i| UpdateStockItemDto::new(i.to_count().into()))
            .collect();
        UpdateStockDto { sku: sku.to_string(), items }
    }
}
pub enum Count {
    Int(i32),
    Float(f64),
}
pub trait ToCount {
    fn to_count(&self) -> Count;
}
impl ToCount for i32 {
    fn to_count(&self) -> Count {
        Count::Int(*self)
    }
}
impl ToCount for f64 {
    fn to_count(&self) -> Count {
        Count::Float(*self)
    }
}
impl From<Count> for i64 {
    fn from(value: Count) -> Self {
        match value {
            Count::Int(i) => i as i64,
            Count::Float(f) => f.floor() as i64,
        }
    }
}