/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 *
 * Generated by: https://openapi-generator.tech
 */

/// BriefOrderItemDto : Информация о маркированном товаре.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BriefOrderItemDto {
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "vat", skip_serializing_if = "Option::is_none")]
    pub vat: Option<crate::models::OrderVatType>,
    /// Количество единиц товара.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f32>,
    /// Название товара.
    #[serde(rename = "offerName", skip_serializing_if = "Option::is_none")]
    pub offer_name: Option<String>,
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    #[serde(rename = "offerId", skip_serializing_if = "Option::is_none")]
    pub offer_id: Option<String>,
    /// Переданные вами коды маркировки.
    #[serde(rename = "instances", skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<crate::models::OrderItemInstanceDto>>,
}

impl BriefOrderItemDto {
    /// Информация о маркированном товаре.
    pub fn new() -> BriefOrderItemDto {
        BriefOrderItemDto {
            id: None,
            vat: None,
            count: None,
            price: None,
            offer_name: None,
            offer_id: None,
            instances: None,
        }
    }
}
