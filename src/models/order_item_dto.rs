/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 *
 * Generated by: https://openapi-generator.tech
 */

/// OrderItemDto : Список товаров в заказе.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OrderItemDto {
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    #[serde(rename = "offerId", skip_serializing_if = "Option::is_none")]
    pub offer_id: Option<String>,
    /// Название товара.
    #[serde(rename = "offerName", skip_serializing_if = "Option::is_none")]
    pub offer_name: Option<String>,
    /// Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`).
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f32>,
    /// Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.
    #[serde(rename = "buyerPrice", skip_serializing_if = "Option::is_none")]
    pub buyer_price: Option<f32>,
    /// Цена продажи. Стоимость товара в валюте покупателя до применения скидок.
    #[serde(
        rename = "buyerPriceBeforeDiscount",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_price_before_discount: Option<f32>,
    /// {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок.
    #[serde(
        rename = "priceBeforeDiscount",
        skip_serializing_if = "Option::is_none"
    )]
    pub price_before_discount: Option<f32>,
    /// Количество единиц товара.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "vat", skip_serializing_if = "Option::is_none")]
    pub vat: Option<crate::models::OrderVatType>,
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    #[serde(rename = "shopSku", skip_serializing_if = "Option::is_none")]
    pub shop_sku: Option<String>,
    /// {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа.
    #[serde(rename = "subsidy", skip_serializing_if = "Option::is_none")]
    pub subsidy: Option<f32>,
    /// {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ.
    #[serde(rename = "partnerWarehouseId", skip_serializing_if = "Option::is_none")]
    pub partner_warehouse_id: Option<String>,
    /// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    #[serde(rename = "promos", skip_serializing_if = "Option::is_none")]
    pub promos: Option<Vec<crate::models::OrderItemPromoDto>>,
    /// Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует.
    #[serde(rename = "instances", skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<crate::models::OrderItemInstanceDto>>,
    /// Информация об удалении товара из заказа.
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<crate::models::OrderItemDetailDto>>,
    /// Список субсидий по типам.
    #[serde(rename = "subsidies", skip_serializing_if = "Option::is_none")]
    pub subsidies: Option<Vec<crate::models::OrderItemSubsidyDto>>,
    /// Список необходимых маркировок товара.
    #[serde(
        rename = "requiredInstanceTypes",
        skip_serializing_if = "Option::is_none"
    )]
    pub required_instance_types: Option<Vec<crate::models::OrderItemInstanceType>>,
}

impl OrderItemDto {
    /// Список товаров в заказе.
    pub fn new() -> OrderItemDto {
        OrderItemDto {
            id: None,
            offer_id: None,
            offer_name: None,
            price: None,
            buyer_price: None,
            buyer_price_before_discount: None,
            price_before_discount: None,
            count: None,
            vat: None,
            shop_sku: None,
            subsidy: None,
            partner_warehouse_id: None,
            promos: None,
            instances: None,
            details: None,
            subsidies: None,
            required_instance_types: None,
        }
    }
}
