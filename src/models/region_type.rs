/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 *
 * Generated by: https://openapi-generator.tech
 */
use serde::{Deserialize, Serialize};

/// RegionType : Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион.

/// Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RegionType {
    #[serde(rename = "OTHER")]
    Other,
    #[serde(rename = "CONTINENT")]
    Continent,
    #[serde(rename = "REGION")]
    Region,
    #[serde(rename = "COUNTRY")]
    Country,
    #[serde(rename = "COUNTRY_DISTRICT")]
    CountryDistrict,
    #[serde(rename = "REPUBLIC")]
    Republic,
    #[serde(rename = "CITY")]
    City,
    #[serde(rename = "VILLAGE")]
    Village,
    #[serde(rename = "CITY_DISTRICT")]
    CityDistrict,
    #[serde(rename = "SUBWAY_STATION")]
    SubwayStation,
    #[serde(rename = "REPUBLIC_AREA")]
    RepublicArea,
}

impl ToString for RegionType {
    fn to_string(&self) -> String {
        match self {
            Self::Other => String::from("OTHER"),
            Self::Continent => String::from("CONTINENT"),
            Self::Region => String::from("REGION"),
            Self::Country => String::from("COUNTRY"),
            Self::CountryDistrict => String::from("COUNTRY_DISTRICT"),
            Self::Republic => String::from("REPUBLIC"),
            Self::City => String::from("CITY"),
            Self::Village => String::from("VILLAGE"),
            Self::CityDistrict => String::from("CITY_DISTRICT"),
            Self::SubwayStation => String::from("SUBWAY_STATION"),
            Self::RepublicArea => String::from("REPUBLIC_AREA"),
        }
    }
}

impl Default for RegionType {
    fn default() -> RegionType {
        Self::Other
    }
}
