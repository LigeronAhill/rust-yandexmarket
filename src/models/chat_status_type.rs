/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 *
 * Generated by: https://openapi-generator.tech
 */

/// ChatStatusType : Статус чата:  * `NEW` — новый чат. * `WAITING_FOR_CUSTOMER` — нужен ответ покупателя. * `WAITING_FOR_PARTNER` — нужен ответ магазина. * `WAITING_FOR_ARBITER` — нужен ответ арбитра. * `WAITING_FOR_MARKET` — нужен ответ Маркета. * `FINISHED` — чат завершен.

/// Статус чата:  * `NEW` — новый чат. * `WAITING_FOR_CUSTOMER` — нужен ответ покупателя. * `WAITING_FOR_PARTNER` — нужен ответ магазина. * `WAITING_FOR_ARBITER` — нужен ответ арбитра. * `WAITING_FOR_MARKET` — нужен ответ Маркета. * `FINISHED` — чат завершен.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChatStatusType {
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "WAITING_FOR_CUSTOMER")]
    WaitingForCustomer,
    #[serde(rename = "WAITING_FOR_PARTNER")]
    WaitingForPartner,
    #[serde(rename = "WAITING_FOR_ARBITER")]
    WaitingForArbiter,
    #[serde(rename = "WAITING_FOR_MARKET")]
    WaitingForMarket,
    #[serde(rename = "FINISHED")]
    Finished,
}

impl ToString for ChatStatusType {
    fn to_string(&self) -> String {
        match self {
            Self::New => String::from("NEW"),
            Self::WaitingForCustomer => String::from("WAITING_FOR_CUSTOMER"),
            Self::WaitingForPartner => String::from("WAITING_FOR_PARTNER"),
            Self::WaitingForArbiter => String::from("WAITING_FOR_ARBITER"),
            Self::WaitingForMarket => String::from("WAITING_FOR_MARKET"),
            Self::Finished => String::from("FINISHED"),
        }
    }
}

impl Default for ChatStatusType {
    fn default() -> ChatStatusType {
        Self::New
    }
}
